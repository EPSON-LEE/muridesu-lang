func f(x, seq){
    for i in seq
    {
        print(i + x)
    }
}

f(1, [2, 3, 4])

class A {
    func f(self){
        print("A")
    }
}
class S <: A {
    func g(self){
        print("S")
    }
}

S().g()
S().f()

func test_precedence_and_assoc() {
    x = 7
    y = 2
    z = 3
    return x + y * 3 ** z
}

print(test_precedence_and_assoc() == 61)

print(set [1, 2, 3, 4, 5])
print(dict [1 => 2, 3 => 4])

import array, reshape  from numpy

x = array [1, 2, 3, 4]
print(x)
print(reshape(x, (2, 2)))

try {
    1/0
}
catch Exception {
    print("goodo")
}



try {
    1/0
}
catch IOError {
    print("bado")
}
catch Exception as e{
    print("is goodo?:", isinstance(e, ZeroDivisionError))

}
finally {
    print("parfecdo!")
}


print(list(map(fn (x) -> {y = x + 1; return y * 2}, [1, 2, 3])))

func f(x) {
    return fn (y) -> {
        z = x * y
        return (z, z % 2)
    }
}

print(f(1)(2))